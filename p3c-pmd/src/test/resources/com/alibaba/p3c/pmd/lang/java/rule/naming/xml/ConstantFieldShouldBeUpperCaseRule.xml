<test-data>
    <code-fragment id="DaoTest">
        <![CDATA[
    public class CreditBlackResBeanDao extends AbstractDao<CreditBlackResBean, Long> {

    public static final String TABLENAME = "CREDIT_BLACK_RES_BEAN";

    /**
     * Properties of entity CreditBlackResBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StudentName = new Property(1, String.class, "studentName", false, "STUDENT_NAME");
        public final static Property StudentId = new Property(2, int.class, "studentId", false, "STUDENT_ID");
        public final static Property ClassId = new Property(3, int.class, "classId", false, "CLASS_ID");
        public final static Property Credit = new Property(4, int.class, "credit", false, "CREDIT");
    }


    public CreditBlackResBeanDao(DaoConfig config) {
        super(config);
    }

    public CreditBlackResBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CREDIT_BLACK_RES_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STUDENT_NAME\" TEXT," + // 1: studentName
                "\"STUDENT_ID\" INTEGER NOT NULL ," + // 2: studentId
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 3: classId
                "\"CREDIT\" INTEGER NOT NULL );"); // 4: credit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CREDIT_BLACK_RES_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CreditBlackResBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(2, studentName);
        }
        stmt.bindLong(3, entity.getStudentId());
        stmt.bindLong(4, entity.getClassId());
        stmt.bindLong(5, entity.getCredit());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CreditBlackResBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(2, studentName);
        }
        stmt.bindLong(3, entity.getStudentId());
        stmt.bindLong(4, entity.getClassId());
        stmt.bindLong(5, entity.getCredit());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public CreditBlackResBean readEntity(Cursor cursor, int offset) {
        CreditBlackResBean entity = new CreditBlackResBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // studentName
            cursor.getInt(offset + 2), // studentId
            cursor.getInt(offset + 3), // classId
            cursor.getInt(offset + 4) // credit
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, CreditBlackResBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStudentId(cursor.getInt(offset + 2));
        entity.setClassId(cursor.getInt(offset + 3));
        entity.setCredit(cursor.getInt(offset + 4));
     }

    @Override
    protected final Long updateKeyAfterInsert(CreditBlackResBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(CreditBlackResBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CreditBlackResBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}

    ]]>
    </code-fragment>
    <test-code>
        <description>end with Dao can be skip</description>
        <expected-problems>0</expected-problems>
        <code-ref id="DaoTest" />
    </test-code>


    <code-fragment id="ConstantFieldNamingRule">
    <![CDATA[
    public class ConstantFieldNameRule {
    private  static final int MAX = 5;
    private  static final long serialVersionUID = 1L;
    //except Log
    private static final Logger logger = new Logger();
    //Constant variable names should be written in upper characters separated by underscores
    private static final boolean success = true;
    private static final Integer xxxService = 1;
    private static final Integer xxxxservice = 1;
       public void f() {
         int il = 0;
    }
}
    ]]>
    </code-fragment>
    <test-code>
        <description>Constant name should be upper case</description>
        <expected-problems>2</expected-problems>
        <code-ref id="ConstantFieldNamingRule" />
        <expected-linenumbers>7,9</expected-linenumbers>
    </test-code>

    <code-fragment id="ConstantFieldNamingRule1">
        <![CDATA[
    public class ConstantFieldNameRule {
    private  static final int MAX = 5;
    private  static final long serialVersionUID = 1L;
    //Log除外
    private static final Logger logger = new Logger();
    private static final Log log = new Log();
       public void f() {
         int il = 0;
    }
}
    ]]>
    </code-fragment>
    <test-code>
        <description>Constant name should be upper case</description>
        <expected-problems>0</expected-problems>
        <code-ref id="ConstantFieldNamingRule1" />
    </test-code>


    <code-fragment id="question-dao">
        <![CDATA[
    package com.xh.bookshelf;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xh.module_bookshelf.db.local.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "xh_question".
*/
public class QuestionDao extends AbstractDao<Question, Void> {

    public static final String TABLENAME = "xh_question";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "question_id");
        public final static Property AudioFileList = new Property(1, String.class, "audioFileList", false, "audio_file_list");
        public final static Property CheckType = new Property(2, int.class, "checkType", false, "check_type");
        public final static Property Difficulty = new Property(3, int.class, "difficulty", false, "difficulty");
        public final static Property DrawingUrl = new Property(4, String.class, "drawingUrl", false, "drawing_url");
        public final static Property ErroRate = new Property(5, int.class, "erroRate", false, "error_rate");
        public final static Property ExplainContent = new Property(6, String.class, "explainContent", false, "explain_content");
        public final static Property ExplainContentType = new Property(7, int.class, "explainContentType", false, "explain_content_type");
        public final static Property ListeningUrl = new Property(8, String.class, "listeningUrl", false, "listening_url");
        public final static Property LocalDrawingUrl = new Property(9, String.class, "localDrawingUrl", false, "local_drawing_url");
        public final static Property LocalExplainContent = new Property(10, String.class, "localExplainContent", false, "local_explain_content");
        public final static Property LocalListeningUrl = new Property(11, String.class, "localListeningUrl", false, "local_listening_url");
        public final static Property LocalStemContent = new Property(12, String.class, "localStemContent", false, "local_stem_content");
        public final static Property LockInputType = new Property(13, int.class, "lockInputType", false, "lock_input_type");
        public final static Property ParentQuestionId = new Property(14, String.class, "parentQuestionId", false, "parent_question_id");
        public final static Property QuestionSystemType = new Property(15, int.class, "questionSystemType", false, "question_system_type");
        public final static Property QuestionUserType = new Property(16, int.class, "questionUserType", false, "question_user_type");
        public final static Property SonQuestionIds = new Property(17, String.class, "sonQuestionIds", false, "son_question_ids");
        public final static Property StemContent = new Property(18, String.class, "stemContent", false, "stem_content");
        public final static Property StemContentType = new Property(19, int.class, "stemContentType", false, "stem_content_type");
        public final static Property SystemCatalogId = new Property(20, String.class, "systemCatalogId", false, "system_catalog_id");
        public final static Property TagCodes = new Property(21, String.class, "tagCodes", false, "tag_codes");
        public final static Property TotalScores = new Property(22, int.class, "totalScores", false, "total_scores");
        public final static Property VerifyStatus = new Property(23, int.class, "verifyStatus", false, "verify_status");
        public final static Property QuestionIndex = new Property(24, int.class, "questionIndex", false, "question_index");
        public final static Property Role = new Property(25, String.class, "role", false, "role");
    }


    public QuestionDao(DaoConfig config) {
        super(config);
    }

    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String audioFileList = entity.getAudioFileList();
        if (audioFileList != null) {
            stmt.bindString(2, audioFileList);
        }
        stmt.bindLong(3, entity.getCheckType());
        stmt.bindLong(4, entity.getDifficulty());

        String drawingUrl = entity.getDrawingUrl();
        if (drawingUrl != null) {
            stmt.bindString(5, drawingUrl);
        }
        stmt.bindLong(6, entity.getErroRate());

        String explainContent = entity.getExplainContent();
        if (explainContent != null) {
            stmt.bindString(7, explainContent);
        }
        stmt.bindLong(8, entity.getExplainContentType());

        String listeningUrl = entity.getListeningUrl();
        if (listeningUrl != null) {
            stmt.bindString(9, listeningUrl);
        }

        String localDrawingUrl = entity.getLocalDrawingUrl();
        if (localDrawingUrl != null) {
            stmt.bindString(10, localDrawingUrl);
        }

        String localExplainContent = entity.getLocalExplainContent();
        if (localExplainContent != null) {
            stmt.bindString(11, localExplainContent);
        }

        String localListeningUrl = entity.getLocalListeningUrl();
        if (localListeningUrl != null) {
            stmt.bindString(12, localListeningUrl);
        }

        String localStemContent = entity.getLocalStemContent();
        if (localStemContent != null) {
            stmt.bindString(13, localStemContent);
        }
        stmt.bindLong(14, entity.getLockInputType());

        String parentQuestionId = entity.getParentQuestionId();
        if (parentQuestionId != null) {
            stmt.bindString(15, parentQuestionId);
        }
        stmt.bindLong(16, entity.getQuestionSystemType());
        stmt.bindLong(17, entity.getQuestionUserType());

        String sonQuestionIds = entity.getSonQuestionIds();
        if (sonQuestionIds != null) {
            stmt.bindString(18, sonQuestionIds);
        }

        String stemContent = entity.getStemContent();
        if (stemContent != null) {
            stmt.bindString(19, stemContent);
        }
        stmt.bindLong(20, entity.getStemContentType());

        String systemCatalogId = entity.getSystemCatalogId();
        if (systemCatalogId != null) {
            stmt.bindString(21, systemCatalogId);
        }

        String tagCodes = entity.getTagCodes();
        if (tagCodes != null) {
            stmt.bindString(22, tagCodes);
        }
        stmt.bindLong(23, entity.getTotalScores());
        stmt.bindLong(24, entity.getVerifyStatus());
        stmt.bindLong(25, entity.getQuestionIndex());

        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(26, role);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String audioFileList = entity.getAudioFileList();
        if (audioFileList != null) {
            stmt.bindString(2, audioFileList);
        }
        stmt.bindLong(3, entity.getCheckType());
        stmt.bindLong(4, entity.getDifficulty());

        String drawingUrl = entity.getDrawingUrl();
        if (drawingUrl != null) {
            stmt.bindString(5, drawingUrl);
        }
        stmt.bindLong(6, entity.getErroRate());

        String explainContent = entity.getExplainContent();
        if (explainContent != null) {
            stmt.bindString(7, explainContent);
        }
        stmt.bindLong(8, entity.getExplainContentType());

        String listeningUrl = entity.getListeningUrl();
        if (listeningUrl != null) {
            stmt.bindString(9, listeningUrl);
        }

        String localDrawingUrl = entity.getLocalDrawingUrl();
        if (localDrawingUrl != null) {
            stmt.bindString(10, localDrawingUrl);
        }

        String localExplainContent = entity.getLocalExplainContent();
        if (localExplainContent != null) {
            stmt.bindString(11, localExplainContent);
        }

        String localListeningUrl = entity.getLocalListeningUrl();
        if (localListeningUrl != null) {
            stmt.bindString(12, localListeningUrl);
        }

        String localStemContent = entity.getLocalStemContent();
        if (localStemContent != null) {
            stmt.bindString(13, localStemContent);
        }
        stmt.bindLong(14, entity.getLockInputType());

        String parentQuestionId = entity.getParentQuestionId();
        if (parentQuestionId != null) {
            stmt.bindString(15, parentQuestionId);
        }
        stmt.bindLong(16, entity.getQuestionSystemType());
        stmt.bindLong(17, entity.getQuestionUserType());

        String sonQuestionIds = entity.getSonQuestionIds();
        if (sonQuestionIds != null) {
            stmt.bindString(18, sonQuestionIds);
        }

        String stemContent = entity.getStemContent();
        if (stemContent != null) {
            stmt.bindString(19, stemContent);
        }
        stmt.bindLong(20, entity.getStemContentType());

        String systemCatalogId = entity.getSystemCatalogId();
        if (systemCatalogId != null) {
            stmt.bindString(21, systemCatalogId);
        }

        String tagCodes = entity.getTagCodes();
        if (tagCodes != null) {
            stmt.bindString(22, tagCodes);
        }
        stmt.bindLong(23, entity.getTotalScores());
        stmt.bindLong(24, entity.getVerifyStatus());
        stmt.bindLong(25, entity.getQuestionIndex());

        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(26, role);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // audioFileList
            cursor.getInt(offset + 2), // checkType
            cursor.getInt(offset + 3), // difficulty
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // drawingUrl
            cursor.getInt(offset + 5), // erroRate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // explainContent
            cursor.getInt(offset + 7), // explainContentType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // listeningUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // localDrawingUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // localExplainContent
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // localListeningUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // localStemContent
            cursor.getInt(offset + 13), // lockInputType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // parentQuestionId
            cursor.getInt(offset + 15), // questionSystemType
            cursor.getInt(offset + 16), // questionUserType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // sonQuestionIds
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // stemContent
            cursor.getInt(offset + 19), // stemContentType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // systemCatalogId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // tagCodes
            cursor.getInt(offset + 22), // totalScores
            cursor.getInt(offset + 23), // verifyStatus
            cursor.getInt(offset + 24), // questionIndex
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25) // role
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAudioFileList(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckType(cursor.getInt(offset + 2));
        entity.setDifficulty(cursor.getInt(offset + 3));
        entity.setDrawingUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setErroRate(cursor.getInt(offset + 5));
        entity.setExplainContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExplainContentType(cursor.getInt(offset + 7));
        entity.setListeningUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocalDrawingUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLocalExplainContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLocalListeningUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLocalStemContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLockInputType(cursor.getInt(offset + 13));
        entity.setParentQuestionId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQuestionSystemType(cursor.getInt(offset + 15));
        entity.setQuestionUserType(cursor.getInt(offset + 16));
        entity.setSonQuestionIds(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStemContent(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStemContentType(cursor.getInt(offset + 19));
        entity.setSystemCatalogId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTagCodes(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTotalScores(cursor.getInt(offset + 22));
        entity.setVerifyStatus(cursor.getInt(offset + 23));
        entity.setQuestionIndex(cursor.getInt(offset + 24));
        entity.setRole(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
     }

    @Override
    protected final Void updateKeyAfterInsert(Question entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(Question entity) {
        return null;
    }

    @Override
    public boolean hasKey(Question entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}

    ]]>
    </code-fragment>
    <test-code>
        <description>Constant name should be upper case</description>
        <expected-problems>0</expected-problems>
        <code-ref id="question-dao" />
    </test-code>
</test-data>
